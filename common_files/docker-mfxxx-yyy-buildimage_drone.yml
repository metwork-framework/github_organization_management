# automatically generated from https://github.com/metwork-framework/github_organization_management/blob/master/common_files/docker-mfxxx-yyy-buildimage_drone.yml)

{% if REPO|fnmatch('docker-mf*-*-buildimage') %}
    {% set LIST = REPO.split("-") %}
    {% set MODULE = LIST[1] %}
    {% set OS = LIST[2] %}
{% else %}
    {% set MODULE = "" %}
    {% set OS = "" %}
{% endif %}

{% if "trigger-github" not in "TOPICS"|getenv|from_json %}
trigger_common: &trigger_common
{% if "trigger-github" in "TOPICS"|getenv|from_json %}
  image: metwork/drone-downstream-specific-image:latest
  pull: true
  secrets: [ downstream_token, downstream_server ]
  params:
    - FORCED_OS_VERSION={{OS}}
{% endif %}



pipeline:
  docker:
    image: metwork/drone-docker-specific-image:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root:/root
    commands:
      - HASH_BEFORE=`docker images -q metwork/{{MODULE}}-{{OS}}-buildimage:${DRONE_BRANCH}`
      - if test "${DRONE_BRANCH}" = "master"; then EXTRA_TAGS="-t metwork/{{MODULE}}-{{OS}}-buildimage:latest"; else EXTRA_TAGS=""; fi
      - docker build -t metwork/{{MODULE}}-{{OS}}-buildimage:${DRONE_BRANCH} $${EXTRA_TAGS} --build-arg BRANCH=${DRONE_BRANCH} --build-arg CACHEBUST=${DRONE_BUILD_NUMBER} .
      - HASH_AFTER=`docker images -q metwork/{{MODULE}}-{{OS}}-buildimage:${DRONE_BRANCH}`
      - if test "$${HASH_BEFORE}" = "$${HASH_AFTER}"; then
          touch .drone_downstream_bypass;
        else
          docker push metwork/{{MODULE}}-{{OS}}-buildimage:${DRONE_BRANCH};
          if test "${DRONE_BRANCH}" = "master"; then
            docker push metwork/{{MODULE}}-{{OS}}-buildimage:latest;
          fi;
        fi
    when:
      event: push
{% if OS == "centos6" %}
  {% if "trigger-github" not in "TOPICS"|getenv|from_json %}
    {% if MODULE == "mfext" %}
  trigger:
    <<: *trigger_common
    repositories:
      - metwork-framework/mfext@${DRONE_BRANCH}
    when:
      status: success
      event: push

    {% elif MODULE == "mfxxx" %}
  trigger:
    <<: *trigger_common
    repositories:
      - metwork-framework/mfserv@${DRONE_BRANCH}
      - metwork-framework/mfdata@${DRONE_BRANCH}
      - metwork-framework/mfbase@${DRONE_BRANCH}
      - metwork-framework/mfadmin@${DRONE_BRANCH}
      - metwork-framework/mfsysmon@${DRONE_BRANCH}
    when:
      status: success
      event: push
      branch: [ integration, experimental*, release_* ]

  trigger_master:
    <<: *trigger_common
    repositories:
      - metwork-framework/mfserv@${DRONE_BRANCH}
      - metwork-framework/mfdata@${DRONE_BRANCH}
      - metwork-framework/mfbase@${DRONE_BRANCH}
      - metwork-framework/mfadmin@${DRONE_BRANCH}
      - metwork-framework/mfsysmon@${DRONE_BRANCH}
      - metwork-framework/mfextaddons@${DRONE_BRANCH}
    when:
      status: success
      event: push
      branch: [ master ]
    {% endif %}
  {% else %}
    {% if MODULE == "mfext" %}
  repository_dispatch:
    image: metwork/drone-repository-dispatch-specific-image:latest
    repositories:
      - metwork-framework/mfext@${DRONE_BRANCH}
    secrets: [ downstream_github_token ]
    when:
      status: success
      event: push
    {% elif MODULE == "mfxxx" %}
  repository_dispatch:
    image: metwork/drone-repository-dispatch-specific-image:latest
    repositories:
      - metwork-framework/mfserv@${DRONE_BRANCH}
      - metwork-framework/mfdata@${DRONE_BRANCH}
      - metwork-framework/mfbase@${DRONE_BRANCH}
      - metwork-framework/mfadmin@${DRONE_BRANCH}
      - metwork-framework/mfsysmon@${DRONE_BRANCH}
      - metwork-framework/mfextaddons@${DRONE_BRANCH}
    secrets: [ downstream_github_token ]
    when:
      status: success
      event: push
      branch: [ integration, experimental*, release_* ]

  repository_dispatch_master:
    image: metwork/drone-repository-dispatch-specific-image:latest
    repositories:
      - metwork-framework/mfserv@${DRONE_BRANCH}
      - metwork-framework/mfdata@${DRONE_BRANCH}
      - metwork-framework/mfbase@${DRONE_BRANCH}
      - metwork-framework/mfadmin@${DRONE_BRANCH}
      - metwork-framework/mfsysmon@${DRONE_BRANCH}
    secrets: [ downstream_github_token ]
    when:
      status: success
      event: push
      branch: [ master ]
    {% endif %}
  {% endif %}
{% endif %}

branches: [ master, integration, experimental*, release_* ]
