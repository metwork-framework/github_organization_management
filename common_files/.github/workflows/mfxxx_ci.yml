name: CI

on:
  push:
    branches: 
      - master
      - integration
      - experimental*
      - release_*
      - ci*
      - pci* 
    tags:
      - v*
  pull_request:
  repository_dispatch:
    types:
      - metwork-trigger*

env:
{% if "github-selfhosted" in "TOPICS"|getenv|from_json %}
{% if REPO == "mfextaddon_soprano" %}
    DOCKER_RUN_OPTIONS: "-v {% raw %}${{ github.workspace }}{% endraw %}:/src -v /buildcache:/buildcache -v /private:/private -e GITHUB_REF -e GITHUB_RUN_NUMBER -e GITHUB_SHA -e GITHUB_REPOSITORY"
{% else %}
    DOCKER_RUN_OPTIONS: "-v {% raw %}${{ github.workspace }}{% endraw %}:/src -v /buildcache:/buildcache -e GITHUB_REF -e GITHUB_RUN_NUMBER -e GITHUB_SHA -e GITHUB_REPOSITORY"
{% endif %}
{% endif %}
{% if "github-actions" in "TOPICS"|getenv|from_json %}
    DOCKER_RUN_OPTIONS: "-v {% raw %}${{ github.workspace }}{% endraw %}:/src -e GITHUB_REF -e GITHUB_RUN_NUMBER -e GITHUB_SHA -e GITHUB_REPOSITORY"
{% endif %}
    WORKFLOW_SCRIPTS_DIR: .github/workflows
    DOCKER_WORKFLOW_SCRIPTS_DIR: /src/.github/workflows
    PAYLOAD_BRANCH: {% raw %}${{ github.event.client_payload.branch}}{% endraw %}
    PAYLOAD_OS: {% raw %}${{ github.event.client_payload.os}}{% endraw %}

jobs:
  ci_build:
{% if "github-selfhosted" in "TOPICS"|getenv|from_json %}
{% if REPO == "mfextaddon_scientific" %}
    runs-on: [self-hosted, metwork, mfextaddon_scientific]
{% else %}
    runs-on: [self-hosted, metwork]
{% endif %}
{% endif %}
{% if "github-actions" in "TOPICS"|getenv|from_json %}
    runs-on: ubuntu-latest
{% endif %}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: {% raw %}${{ github.event.client_payload.branch || github.ref }}{% endraw %}
      - name: set variables
        id: SetVariables
        run: |
          ${WORKFLOW_SCRIPTS_DIR}/set_variables.sh
      - name: debug env
        run: |
          env
      - name: bootstrap
        if: {% raw %}${{ steps.SetVariables.outputs.branch != 'null' }}{% endraw %}
        run: |
          TARGET_DIR={% raw %}${{ steps.SetVariables.outputs.target_dir }}{% endraw %}
          BRANCH={% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          OS_VERSION={% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}
          TAG={% raw %}${{ steps.SetVariables.outputs.tag }}{% endraw %}
          DEP_DIR={% raw %}${{ steps.SetVariables.outputs.dep_dir }}{% endraw %}
          BUILDIMAGE={% raw %}${{ steps.SetVariables.outputs.buildimage }}{% endraw %}
          docker pull ${BUILDIMAGE}
          docker run ${DOCKER_RUN_OPTIONS} -e TARGET_DIR=${TARGET_DIR} -e BRANCH=${BRANCH} -e TAG=${TAG} -e DEP_DIR=${DEP_DIR} -e OS_VERSION=${OS_VERSION} --rm ${BUILDIMAGE} /bin/bash -c "${DOCKER_WORKFLOW_SCRIPTS_DIR}/bootstrap_ci.sh"
      - name: build
        if: {% raw %}${{ steps.SetVariables.outputs.branch != 'null' }}{% endraw %}
        id: BuildStep
        run: |
          TARGET_DIR={% raw %}${{ steps.SetVariables.outputs.target_dir }}{% endraw %}
          BRANCH={% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          OS_VERSION={% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}
          TAG={% raw %}${{ steps.SetVariables.outputs.tag }}{% endraw %}
          DEP_BRANCH={% raw %}${{ steps.SetVariables.outputs.dep_branch }}{% endraw %}
          BUILDIMAGE={% raw %}${{ steps.SetVariables.outputs.buildimage }}{% endraw %}
          docker pull ${BUILDIMAGE}
          docker run ${DOCKER_RUN_OPTIONS} -e TARGET_DIR=${TARGET_DIR} -e BRANCH=${BRANCH} -e DEP_BRANCH=${DEP_BRANCH} -e TAG=${TAG} -e OS_VERSION=${OS_VERSION} --rm ${BUILDIMAGE} /bin/bash -c "${DOCKER_WORKFLOW_SCRIPTS_DIR}/build.sh"
          cat  {% raw %}${{ github.workspace }}{% endraw %}/github_output >> ${GITHUB_OUTPUT}
{% if REPO != "mfextaddon_template" %}
      - name: publish buildlogs
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.branch != 'null' }}{% endraw %}
        uses: thebaptiste/ssh-scp-ssh-pipelines@metwork
        env:
          REMOTE: {% raw %}${{ steps.SetVariables.outputs.buildlog_dir }}{% endraw %}
          LOCAL: {% raw %}${{ github.workspace }}/buildlogs{% endraw %}
        with:
          host: {% raw %}${{ secrets.METWORKPUB_HOST }}{% endraw %}
          user: {% raw %}${{ secrets.METWORKPUB_USERNAME }}{% endraw %}
          pass: {% raw %}${{ secrets.METWORKPUB_PASSWORD }}{% endraw %}
          port: 22
          first_ssh: |
            mkdir -p ${REMOTE}
          scp: |
            '${LOCAL}/*' => ${REMOTE}
      - name: integration tests
        if: {% raw %}${{ steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' }}{% endraw %}
        run: |
          TESTIMAGE={% raw %}${{ steps.SetVariables.outputs.testimage }}{% endraw %}
          DEP_BRANCH={% raw %}${{ steps.SetVariables.outputs.dep_branch }}{% endraw %}
          BRANCH={% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          OS_VERSION={% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}
          docker pull ${TESTIMAGE}
          docker run ${DOCKER_RUN_OPTIONS} -e DEP_BRANCH=${DEP_BRANCH} -e BRANCH=${BRANCH} -e OS_VERSION=${OS_VERSION} --rm ${TESTIMAGE} /bin/bash -c "${DOCKER_WORKFLOW_SCRIPTS_DIR}/integration_tests.sh"
      - name: publish rpms
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.branch != 'null' }}{% endraw %}
        uses: thebaptiste/ssh-scp-ssh-pipelines@metwork
        env:
          REMOTE: {% raw %}${{ steps.SetVariables.outputs.rpm_dir }}{% endraw %}
          LOCAL: {% raw %}${{ github.workspace }}{% endraw %}/rpms
        with:
          host: {% raw %}${{ secrets.METWORKPUB_HOST }}{% endraw %}
          user: {% raw %}${{ secrets.METWORKPUB_USERNAME }}{% endraw %}
          pass: {% raw %}${{ secrets.METWORKPUB_PASSWORD }}{% endraw %}
          port: 22
          first_ssh: |
            mkdir -p ${REMOTE}
          scp: |
            '${LOCAL}/metwork-*.rpm' => ${REMOTE}
      - name: createrepo
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.branch != 'null' }}{% endraw %}
        uses: thebaptiste/ssh-scp-ssh-pipelines@metwork
        env:
          REMOTE: {% raw %}${{ steps.SetVariables.outputs.rpm_dir }}{% endraw %}
          LOCAL: {% raw %}${{ github.workspace }}{% endraw %}/.github/workflows
        with:
          host: {% raw %}${{ secrets.METWORKPUB_HOST }}{% endraw %}
          user: {% raw %}${{ secrets.METWORKPUB_USERNAME }}{% endraw %}
          pass: {% raw %}${{ secrets.METWORKPUB_PASSWORD }}{% endraw %}
          port: 22
          scp: |
            '${LOCAL}/createrepo.sh' => ${REMOTE}
          last_ssh: |
            cd ${REMOTE}
            chmod +x createrepo.sh
            ./createrepo.sh .
      - name: publish doc
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.branch != 'null' }}{% endraw %}
        uses: thebaptiste/ssh-scp-ssh-pipelines@metwork
        env:
          REMOTE: {% raw %}${{ steps.SetVariables.outputs.doc_dir }}{% endraw %}
          LOCAL: {% raw %}${{ github.workspace }}{% endraw %}/html_doc
        with:
          host: {% raw %}${{ secrets.METWORKPUB_HOST }}{% endraw %}
          user: {% raw %}${{ secrets.METWORKPUB_USERNAME }}{% endraw %}
          pass: {% raw %}${{ secrets.METWORKPUB_PASSWORD }}{% endraw %}
          port: 22
          first_ssh: |
            rm -rf ${REMOTE}
            mkdir -p ${REMOTE}
          scp: |
            '${LOCAL}/*' => ${REMOTE}
{% if "github-selfhosted" in "TOPICS"|getenv|from_json %}
      - name: clean cache on failure
        if: failure()
        run: |
          sudo rm -f {% raw %}${{ steps.BuildStep.outputs.buildcache }}{% endraw %}
{% endif %}
{% if REPO == "mfserv" or REPO == "mfdata" or REPO == "mfbase" %}
      - name: dispatch plugins buildimage rocky8 from rocky8 tag
        if: {% raw %}${{ github.ref_type == 'tag' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos8' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-{{REPO}}plugins-centos8-buildimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "tag": "{% raw %}${{ github.ref_name }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch plugins image rocky9 from rocky8 tag
        if: {% raw %}${{ github.ref_type == 'tag' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos8' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-{{REPO}}plugins-rocky9-image
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "tag": "{% raw %}${{ github.ref_name }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch plugins buildimage rocky8 from rocky8 
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos8' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-{{REPO}}plugins-centos8-buildimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "tag": "null", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch plugins buildimage rocky9 from rocky8
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos8' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-{{REPO}}plugins-rocky9-image
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "tag": "null", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
{% endif %}
{% if REPO == "mfext" %}
      - name: dispatch mfxxx testimage centos6 from centos6
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos6' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-mfxxx-centos6-testimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfxxx testimage centos7 from centos6
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos6' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-mfxxx-centos7-testimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfxxx testimage centos8 from centos8
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos8' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-mfxxx-centos8-testimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfxxx buildimage centos6 from centos6
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos6' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-mfxxx-centos6-buildimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfxxx buildimage centos7 from centos6
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos6' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-mfxxx-centos7-buildimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfxxx buildimage centos8 from centos6
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos6' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-mfxxx-centos8-buildimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfxxx buildimage centos8 from centos8
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos8' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/docker-mfxxx-centos8-buildimage
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
{% endif %}
{% if REPO == "mfextaddon_rabbitmq" %}
      - name: dispatch mfbus
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/mfbus
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
{% endif %}
{% if REPO == "mfextaddon_scientific" %}
      - name: dispatch mfextaddon_radartools
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/mfextaddon_radartools
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfextaddon_python3_ia centos8
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos8' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/mfextaddon_python3_ia
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
      - name: dispatch mfextaddon_python3_ia centos7
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' && steps.SetVariables.outputs.os == 'centos6' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/mfextaddon_python3_ia
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "centos7"}'
{% endif %}
{% if REPO == "mfextaddon_radartools" %}
      - name: dispatch mfextaddon_soprano
        if: {% raw %}${{ github.event_name != 'pull_request' && steps.SetVariables.outputs.skip_dispatch == 'false' && steps.SetVariables.outputs.branch != 'null' && steps.BuildStep.outputs.bypass == 'false' }}{% endraw %}
        uses: peter-evans/repository-dispatch@v3
        with:
          token: {% raw %}${{ secrets.METWORK_ACCESS_TOKEN }}{% endraw %}
          repository: metwork-framework/mfextaddon_soprano
          event-type: metwork-trigger-{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}
          client-payload: '{"branch": "{% raw %}${{ steps.SetVariables.outputs.branch }}{% endraw %}", "os": "{% raw %}${{ steps.SetVariables.outputs.os }}{% endraw %}"}'
{% endif %}
{% if "github-selfhosted" in "TOPICS"|getenv|from_json %}
      - name: chown on build outputs
        if: always()
        run: |
          sudo chown -R githubactions:metworkpub .
          sudo chmod -R 775 .
{% endif %}
{% endif %}
